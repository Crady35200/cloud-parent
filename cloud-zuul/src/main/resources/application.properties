#服务端口
server.port=8888
#服务访问根路径
server.servlet.context-path=/zuul
#服务名称
spring.application.name=cloud-zuul
#为所有网关服务提供统一前缀,和server.servlet.context-path作用等同
#zuul.prefix=/api
#这种简单的方式目前在该Fina版本测试不行
#zuul.routes.cloud-service=/cloud-service/**
#路由配置，如果过了路由， 不配置则会默认创建基于服务ID的路由规则
#zuul.routes.cloud-service.path=/cloud-service/**
#zuul.routes.cloud-service.service-id=cloud-service
#配置过滤一些规则，不为一些服务默认创建路由规则，配置*则不自动为所有服务创建基于服务ID的规则
#zuul.ignored-services=*
#如果要路由的服务设置了context-path这这个参数必须设置为false
zuul.routes.cloud-service.strip-prefix=false
#某人为所有服务注册=/服务ID/**
#zuul.routes.cloud-consumer.path=/cloud-consumer/**
#zuul.routes.cloud-consumer.service-id=cloud-consumer
zuul.routes.cloud-consumer.strip-prefix=false
#请求连接的超时时间
#ribbon.ConnectTimeout=1000
#请求处理的超时时间
#ribbon.ReadTimeout=2000
#对当前实例的重试次数,不包括首次调用
#ribbon.MaxAutoRetries=0
#切换实例的重试次数
#ribbon.MaxAutoRetriesNextServer=1
#路由转发超时时间，断路器线程池超时时间,这个值一定要比ribbon超时时间长
#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=20000
#全局关闭路由重试
zuul.retryable=false
#关闭制定服务路由重试
#zuul.routes.cloud-consumer.retryable=false
#是否向注册中心注册服务
eureka.client.register-with-eureka=true
#是否从注册中心获取服务列表
eureka.client.fetch-registry=true
#注册中心地址
eureka.client.serviceUrl.defaultZone = http://localhost:8000/eureka
#配置日志级别
logging.level.root=info
#logging.file=zuul.log